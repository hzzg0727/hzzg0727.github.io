<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://hzzg0727.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hzzg0727.github.io/" rel="alternate" type="text/html" /><updated>2022-10-26T11:09:59+08:00</updated><id>https://hzzg0727.github.io/feed.xml</id><title type="html">hzzg0727 Blog :squirrel:</title><subtitle>Record the life, techniques, and others on the road.</subtitle><author><name>hzzg0727</name></author><entry><title type="html">Metasurface design</title><link href="https://hzzg0727.github.io/optics/2022/10/20/Metasurface-design.html" rel="alternate" type="text/html" title="Metasurface design" /><published>2022-10-20T00:00:00+08:00</published><updated>2022-10-20T00:00:00+08:00</updated><id>https://hzzg0727.github.io/optics/2022/10/20/Metasurface-design</id><content type="html" xml:base="https://hzzg0727.github.io/optics/2022/10/20/Metasurface-design.html"><![CDATA[<!-- # Metasurface design -->
<h2 id="achromatic-focusing-theory">Achromatic focusing theory</h2>
<p>To achromatically focus a broadband incident light in a diffraction limited spot, a metalens must impart a spatially and frequency-dependent phase profile given by</p>

\[\begin{equation}
    \varphi(r, \omega) = -\frac{\omega}{c}(\sqrt{r^2+f^2}-f)
\end{equation}\]

<p>where $\varphi$, $\omega$, $c$, $r$, and $f$ are phase, radial coordinate, velocity in the backgroud, angular frequency, and focal length, respectively.</p>

<p>Eq (1) can be further written as</p>

\[\begin{equation}
    \varphi(r, \omega) = -\frac{\omega}{c}(\sqrt{r^2+f^2}-f) + C(\omega)
\end{equation}\]

<p>where $C(\omega)$ is a reference phase whose value depends on the angular frequency only. This value offers an extra degree of freedom for multi-wavelength design, but has no influence on the focus effect of metalens.</p>

<p>The Taylor expansion of $\varphi(r, \omega)$ can be written as</p>

\[\begin{equation}
    \varphi(r, \omega) = \varphi(r, \omega_{d}) + \left. \frac{\partial \varphi}{\partial \omega}\right |_{\omega = \omega_{d}}(\omega - \omega_{d}) + \left. \frac{\partial^2\varphi}{\partial \omega^2} \right |_{\omega = \omega_{d}} \frac{(\omega - \omega_{d})^2}{2} + ...
\end{equation}\]

<p>where the three terms in the right are the required phase, group delay, and group delay dispersion, respectively.</p>

<p>Compare Eq (3) with Eq (1), we have</p>

\[\begin{equation}
    \varphi(r, \omega_{d})=-\frac{\omega_{d}}{c}(\sqrt{r^2+f^2}-f)
\end{equation}\]

\[\begin{equation}
    \left. \frac{\partial \varphi}{\partial \omega} \right |_{\omega = \omega_{d}} = -\frac{1}{c}(\sqrt{r^2+f^2}-f)
\end{equation}\]

\[\begin{equation}
    \left. \frac{\partial^2\varphi}{\partial \omega^2} \right |_{\omega = \omega_{d}} = 0
\end{equation}\]

<p>Compare Eq (3) with Eq (2), we have</p>

\[\begin{equation}
    \varphi(r, \omega_{d}) = -\frac{\omega_{d}}{c}(\sqrt{r^2+f^2}-f) + C(\omega_{d})
\end{equation}\]

\[\begin{equation}
    \left. \frac{\partial \varphi}{\partial \omega} \right |_{\omega = \omega_{d}} = -\frac{1}{c}(\sqrt{r^2+f^2}-f) + \left. C'(\omega) \right |_{\omega=\omega_d}
\end{equation}\]

\[\begin{equation}
    \left. \frac{\partial^2\varphi}{\partial \omega^2} \right |_{\omega = \omega_{d}} = \left. C''(\omega) \right |_{\omega=\omega_d}
\end{equation}\]

<p>Eq (7-9) provide more design freedom than Eq (4-6).</p>

<h2 id="forward-modelling">Forward modelling</h2>
<h3 id="full-wave-solvers">Full wave solvers</h3>
<p>The design of these metasurfaces requires a full solution of Maxwell’s equations in three dimensions. For such sub-wavelength calculations there are (in general) no exact solutions. Their design is thus done by numerical method, known as <strong>full-wave solvers</strong>. Some of the most common methods are FEM, FDTD and RCWA.</p>

<h3 id="fdtd-vs-rcwa">FDTD vs RCWA</h3>
<p>FDTD and RCWA both model the same underlying physical laws, and solve the Maxwell equations via a different mathematical and numerical approach. In FDTD the Maxwell equations are discretized directly in both time and space. RCWA first transforms the equations to the frequency domain (both time-frequency and spatial frequency). Nevertheless, the solutions found by both methods should be the same.</p>

<p>In a single frequency calculation, the RCWA calculation will be much faster because it is naturally suited to single frequency calculations. Time domain methods (FDTD) automatically calculate multiple frequencies, but the downside is that this calculation will be slower when only a few wavelengths are of interest.</p>

<h3 id="rcwa">RCWA</h3>
<p>RCWA is a rigorous method and is able to provide any information you want, such as transmission, reflection, diffraction, field profiles, etc. Since it decomposes fields into set of plane waves, it is most efficient when the field profile approaches that of plane waves. This happens in structures with low to moderate index contrast, but the method can also be applied to metal structures albeit less efficiently. This means you can get very accurate results with very few terms to be solved so the simulations are fast. It is also very good for layered media. You will see it applied to diffraction gratings, resonant gratings, and sometimes to photonic crystals.</p>

<p>To get a deeper understanding, it is necessary to know a little more about the method.  It is a semi-analytical technique, meaning it picks one direction (longitudinal) to solve analytically and the other two (transverse) to be solved numerically.  RCWA uses a discrete Fourier transform to discretize the fields in the transverse direction. This means it represents the fields and materials as a set of plane waves (or planar gratings), so RCWA is extremely fast and efficient for devices with low to moderate index contrast where the waves are more like pure plane waves. The longitudinal direction is solved analytically so the layers can be any thickness without affecting the computational burden. A layer can be picometers to megameters without affecting speed for efficiency at all. It can also very efficiently handle multilayer devices and devices with thousands or even millions of layers.</p>

<h3 id="convergence-test">Convergence test</h3>
<p>In practice the appropriate discretization level is determined by a convergence test. That is to simulate the same configuration with increasingly small discretization steps until the calculation result no longer changes. The discretization can then be set to the level which gives an acceptable deviation from the converged result.</p>

<p>In the case of RCWA, the controlling parameter is the truncation of the spatial frequency series (determined by the Accuracy setting). In FDTD, the resolution is controlled by the spatial step size in three dimensions x, y, and z (The stepsize in time is derived from the spatial discretization stepsize).</p>

<h2 id="metalens-design-process">Metalens Design Process</h2>
<h3 id="1-target-phase-definition">1. Target phase definition</h3>
<p>How to define the target phase profile for the metalens?</p>
<ul>
  <li>(common lens types) Analytical solving.</li>
  <li>(complex systems) Designing the ideal phase (the spatial phase data on a rectilinear grid) mask in OpticStudio using the ray tracing and optimization capabilities.</li>
</ul>

<p>In OpticStudio, the metasurface can be described by the diffractive surface type, which applies an additional phase on top of the base refractive or reflective surface.</p>

<h3 id="2-unit-cell-simulations">2. Unit cell simulations</h3>
<p>The parameters of unit cells are optimized to satisfy the desired transmission and phase properties. The phase and field vs. radius results are then saved to build a meta-atom library.</p>

<p>The RCWA solver is introduced as a recommended/complementary tool for unit cell simulations, and a comparison is made with FDTD for verification.</p>

<h3 id="3-full-lens-design">3. Full lens design</h3>
<p>How to design and analyse the full metalens?</p>
<h4 id="direct-simulations">Direct simulations</h4>
<p>Construct and simulate the full metalens in FDTD based on the  target phase profile and the phase vs. radius data from the previous step.</p>

<p>While this approach is more straightforward, it can pose challenges in terms of memory and simulation time, especially for larger metalens.</p>

<p>The nearfield from the simulation can be exported to a <code class="language-plaintext highlighter-rouge">.ZBF</code> file for further propagation in the Ansys OpticStudio for farfield analysis.</p>

<h4 id="reconstruction-of-full-fields">Reconstruction of full fields</h4>
<p>The nearfield/farfield of the full metalens can be reconstructed with a script using the nearfield library from the meta-atom library, which avoids the time-consuming simulation of the full lens and hence can be much more efficient than the direct simulation approach.</p>

<h3 id="4-propagation-of-imported-beam-nearfield-rightarrow-farfield">4. Propagation of imported beam (nearfield $\rightarrow$ farfield)</h3>
<p>Once the near-field for the metalens is exported to a <code class="language-plaintext highlighter-rouge">.ZBF</code> file, the Physical Optics Propagation (POP) tool in OpticStudio can be used to propagate the beam through the entire system, even including any bulk optical elements as well. Using POP, the phase and irradiance profile can be analyzed at every surface, and the system performance can be evaluated.</p>

<p>The actual beam can be compared with an ideal beam propagated through the target phase mask in OpticStudio to verify the metalens model. If necessary, the optical setup can be re-optimized in OpticStudio based on the propagation results.</p>

<h3 id="5-gds-export">5. GDS export</h3>
<p>Once the design of the physical shapes and the positions of the meta-atoms over the whole lens is finished, the pattern is typically exported to a <code class="language-plaintext highlighter-rouge">GDS</code> format for fabrication.</p>

<h2 id="porlarization">Porlarization</h2>
<h3 id="porlarized-source-and-response-simulation">Porlarized source and response simulation</h3>
<p>To create a circular polarized source, we can combine an x polarized plane wave source with its phase set to 0, and a y polarized plane wave source with its phase set to 90 degrees.</p>

<p><em>A recommended way:</em></p>

<p>It is possible to obtain the response of a system to a beam with arbitrary polarization by running two simulations (each with a single source). The point is that any polarization can be combined with x polarization and y polarization components.</p>

<p><em>My idea:</em></p>

<p>Jones matrix can be utilized to realize polarization synthesis and decomposition. For instance, in this way, a x polarization plane wave (or a y polarization plane wave) can be decomposed into left circularly polarized light and right circularly polarized light to make further analysis.</p>

<h2 id="reference">Reference</h2>
<p>[1] Getting accurate and fast nano-structure simulations: A benchmark of RCWA and FDTD for meta-surface calculation: https://planopsim.com/simulation/getting-accurate-and-fast-nano-structure-simulations-a-benchmark-of-rcwa-and-fdtd-for-meta-surface-calculation/#:~:text=FDTD%20and%20RCWA%20both%20model%20the%20same%20underlying,the%20frequency%20domain%20%28both%20time-frequency%20and%20spatial%20frequency%29.</p>

<p>[2] What is the advantages of Rigorous Coupled Wave Analysis (RCWA) for simulation of electromagnetic field in periodic structures?: https://www.researchgate.net/post/What_is_the_advantages_of_Rigorous_Coupled_Wave_Analysis_RCWA_for_simulation_of_electromagnetic_field_in_periodic_structures</p>]]></content><author><name>hzzg0727</name></author><category term="optics" /><category term="meta" /><category term="FDTD" /><summary type="html"><![CDATA[Achromatic focusing theory To achromatically focus a broadband incident light in a diffraction limited spot, a metalens must impart a spatially and frequency-dependent phase profile given by]]></summary></entry><entry><title type="html">Meta relatives</title><link href="https://hzzg0727.github.io/optics/2022/10/08/Meta-relatives.html" rel="alternate" type="text/html" title="Meta relatives" /><published>2022-10-08T00:00:00+08:00</published><updated>2022-10-08T00:00:00+08:00</updated><id>https://hzzg0727.github.io/optics/2022/10/08/Meta-relatives</id><content type="html" xml:base="https://hzzg0727.github.io/optics/2022/10/08/Meta-relatives.html"><![CDATA[<!-- # Meta Relatives -->
<h2 id="optimization">Optimization</h2>
<h3 id="deterministic-and-stochastic-optimization-methods">Deterministic and stochastic optimization methods</h3>
<p><img src="/assets/images/2022-10-08-Meta-relatives-1.svg" alt="1" /></p>

<p>For more, see Ref.[1].</p>

<h2 id="complex-permittivity-leftrightarrow-complex-refractive-index">Complex permittivity $\leftrightarrow$ complex refractive index</h2>
<p>Assume dealing with optical frequencies, in which case we can treat $\mu_r=1$, due to most materials of interest being non-magnetic at optical frequencies.</p>

<p>In this case, the relationship between the complex relative permittivity (also known as the complex dialectric constant) and the complex refractive index is given by</p>

\[\begin{equation}
    \epsilon_{\mathrm{real}} + i\ \epsilon_{\mathrm{im}} = (n + i\ k)^2
\end{equation}\]

\[\begin{equation}
    \epsilon_{\mathrm{real}} = n^2 - k^2
\end{equation}\]

\[\begin{equation}
    \epsilon_{\mathrm{im}} = 2nk
\end{equation}\]

<p>From Ref.[2].</p>

<h2 id="references">References</h2>
<p>[1] Deterministic and Stochastic Optimization Methods: https://www.baeldung.com/cs/deterministic-stochastic-optimization#:~:text=Thus%2C%20deterministic%20optimization%20refers%20to%20complete%20or%20rigorous,a%20finite%20execution%20time%20and%20considering%20predefined%20tolerances</p>

<p>[2] https://physics.stackexchange.com/questions/397483/converting-a-complex-index-of-refraction-to-a-complex-dielectric-constant#:~:text=In%20that%20case%2C%20the%20relationship%20between%20the%20complex,for%20contributing%20an%20answer%20to%20Physics%20Stack%20Exchange%21</p>]]></content><author><name>hzzg0727</name></author><category term="optics" /><category term="meta" /><summary type="html"><![CDATA[Optimization Deterministic and stochastic optimization methods]]></summary></entry><entry><title type="html">FDTD Note: LumOpt</title><link href="https://hzzg0727.github.io/optics/2022/10/08/FDTD-lumopt.html" rel="alternate" type="text/html" title="FDTD Note: LumOpt" /><published>2022-10-08T00:00:00+08:00</published><updated>2022-10-08T00:00:00+08:00</updated><id>https://hzzg0727.github.io/optics/2022/10/08/FDTD-lumopt</id><content type="html" xml:base="https://hzzg0727.github.io/optics/2022/10/08/FDTD-lumopt.html"><![CDATA[<!-- # LumOpt Notes -->
<h2 id="install">Install</h2>
<h3 id="1-choose-your-install-directory-and-run">1. Choose your install directory and run</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone https://github.com/chriskeraly/LumOpt.git
python setup.py -develop
</code></pre></div></div>

<h3 id="2-add-the-lumerical-api-lumapi-to-your-python-path">2. Add the Lumerical API lumapi to your Python path</h3>
<p>In the LumOpt install directory, go into the “lumopt” directory, and then open “<strong>init</strong>.py”. Modify the path of <code class="language-plaintext highlighter-rouge">lumapi</code> according to your platform and install directory, as follows.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># __init__.py
# ...
</span><span class="k">if</span> <span class="n">current_platform</span> <span class="o">==</span> <span class="s">'Windows'</span><span class="p">:</span>
        <span class="n">default_api_path</span> <span class="o">=</span> <span class="s">'/Program Files/Lumerical/v202/api/python'</span>
    <span class="k">elif</span> <span class="n">current_platform</span> <span class="o">==</span> <span class="s">'Darwin'</span><span class="p">:</span>
        <span class="n">default_api_path</span> <span class="o">=</span> <span class="s">'/Applications/Lumerical/FDTD/FDTD.app/Contents/MacOS/'</span>
    <span class="k">elif</span> <span class="n">current_platform</span> <span class="o">==</span> <span class="s">'Linux'</span><span class="p">:</span>
        <span class="n">default_api_path</span> <span class="o">=</span> <span class="s">'/opt/lumerical/fdtd/api/python'</span>
<span class="c1"># ...
</span></code></pre></div></div>

<p><em>Notes:</em></p>
<ul>
  <li>Some code in Lumopt (utilities/plotter.py) is not compatible with the matplotlib3.5.3. It can be solved through a new environment with python3.6 as the interpreter and relative packages installed.</li>
</ul>]]></content><author><name>hzzg0727</name></author><category term="optics" /><category term="FDTD" /><category term="lumopt" /><category term="meta" /><summary type="html"><![CDATA[Install 1. Choose your install directory and run]]></summary></entry><entry><title type="html">FDTD Note: lsf Language</title><link href="https://hzzg0727.github.io/optics/2022/10/06/FDTD-lsf.html" rel="alternate" type="text/html" title="FDTD Note: lsf Language" /><published>2022-10-06T00:00:00+08:00</published><updated>2022-10-06T00:00:00+08:00</updated><id>https://hzzg0727.github.io/optics/2022/10/06/FDTD-lsf</id><content type="html" xml:base="https://hzzg0727.github.io/optics/2022/10/06/FDTD-lsf.html"><![CDATA[<!-- # FDTD Note: LSF Language -->
<h2 id="useful-commands-in-scriptprompt">Useful commands in <code class="language-plaintext highlighter-rouge">ScriptPrompt</code></h2>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">clear</span><span class="p">;</span>  <span class="c1"># clear all the variables in the workspace
</span><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="n">clear</span> <span class="n">a</span><span class="p">;</span>  <span class="c1"># clear variable a
</span>
<span class="n">clc</span><span class="p">;</span>  <span class="c1"># clear all the commands in the window
</span></code></pre></div></div>

<h2 id="variables">Variables</h2>
<h3 id="variable-types">Variable types</h3>
<p>Different types of variable a available in Lumerical’s scripting:</p>
<ul>
  <li>Strings can be used to define a file name, for instance, or a material.</li>
  <li>Numbers can be used to define dimensions, wavelength, etc.</li>
  <li>Arrays or matrices can be used, for instance, to define a frequency vector or to store a field profile.</li>
  <li>Structure array and cell array can store any type of data elements.</li>
  <li>Matrix datasets contain a data without spatial parameters</li>
  <li>Rectilinear datasets contain data with spatial information from a ectilinear grid (such as the FDTD mesh).</li>
  <li>Unstructured spatial datasets can be used to store data with spatial information on a finite element mesh (for instance, a calculation result from DEVICE) and arbitrary unstructured datasets can store any kind of data type.</li>
</ul>

<p><em>Note:</em></p>
<ul>
  <li>Datasets are typically used to store results from monitors.</li>
  <li>Cell arrays have a defined number of elements.</li>
  <li>Cell matrixes are not supported.</li>
  <li>Array is special matrix (1 * N or N * 1 matrix).</li>
</ul>

<h3 id="predefined-constants">Predefined constants</h3>
<p><img src="/assets/images/20221005-FDTD-lsf-1.png" alt="1" /></p>
<ul>
  <li>endl - “\n”</li>
</ul>

<h3 id="prinf-the-values">Prinf the values</h3>
<p>Use <code class="language-plaintext highlighter-rouge">print()</code> or <code class="language-plaintext highlighter-rouge">?</code> to see the value of variables.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
<span class="c1"># &gt; result:
# &gt; 1
</span><span class="err">?</span><span class="n">a</span><span class="p">;</span>
<span class="c1"># &gt; result:
# &gt; 1
</span></code></pre></div></div>

<h3 id="initialization-of-variables">Initialization of variables</h3>
<p>Use operator <code class="language-plaintext highlighter-rouge">=</code> to initialize the variables.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">string_</span> <span class="o">=</span> <span class="s">"Rectangle"</span><span class="p">;</span>

<span class="n">number_</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

<span class="n">array1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">];</span>  <span class="c1"># 1*3 
</span><span class="n">array2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">;</span> <span class="mi">3</span><span class="p">;</span> <span class="mi">5</span><span class="p">];</span>  <span class="c1"># 3*1 
</span><span class="n">array3</span> <span class="o">=</span> <span class="mi">1</span><span class="p">:</span><span class="mi">2</span><span class="p">:</span><span class="mi">5</span><span class="p">;</span>  <span class="c1"># equal to [1; 3; 5]
</span><span class="n">array4</span> <span class="o">=</span> <span class="mi">5</span><span class="p">:</span><span class="o">-</span><span class="mi">2</span><span class="p">:</span><span class="mi">1</span><span class="p">;</span>  <span class="c1"># [5, 3, 1]
</span><span class="n">array5</span> <span class="o">=</span> <span class="n">linspace</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>  <span class="c1"># Create an array with 3 numebrs from 1 to 5.
</span>
<span class="n">matrix1</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">;</span> 
           <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">;</span>
           <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">];</span>  <span class="c1"># 3*2
</span><span class="n">matrix2</span> <span class="o">=</span> <span class="n">matrix</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>  <span class="c1"># Use the “matrix” and the “zeros” functions to create an array filled with 0.
</span><span class="n">matrix3</span> <span class="o">=</span> <span class="n">ones</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>  <span class="c1"># Use the “ones” function to create an array filled with ones.
</span>
<span class="n">struct_</span> <span class="o">=</span> <span class="n">struct</span><span class="p">;</span> <span class="c1"># To create a structure array, use the "struct" command.
</span><span class="n">struct_</span><span class="p">.</span><span class="n">a</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>  <span class="c1"># Add and access the structure array’s elements using the “.” operator.
</span><span class="n">struct_</span><span class="p">.</span><span class="n">b</span> <span class="o">=</span> <span class="s">"Rectangle"</span><span class="p">;</span>

<span class="n">cell_</span> <span class="o">=</span> <span class="n">cell</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>  <span class="c1"># to create a cell array, use the "cell" command and specify the number of elements.
</span><span class="n">cell_</span><span class="p">{</span><span class="mi">1</span><span class="p">}</span> <span class="o">=</span> <span class="s">"String"</span><span class="p">;</span>  <span class="c1"># The elements can be accessed using "{}" and the index of the element.
</span><span class="n">cell_</span><span class="p">{</span><span class="mi">2</span><span class="p">}</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span>  <span class="c1"># The elements can be accessed using "{}" and the index of the element.
</span></code></pre></div></div>

<h3 id="element-access">Element access</h3>
<p>The matrix(array)’s elements can be accessed using operator <code class="language-plaintext highlighter-rouge">()</code> with their index. Note the index starts at <strong>1</strong> and not 0.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">matrix1</span> <span class="o">=</span> <span class="n">zeros</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
<span class="k">print</span><span class="p">(</span><span class="n">matrix1</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
<span class="c1"># &gt; result: 
# &gt; 0
</span></code></pre></div></div>

<p>The structure array’s elements can be accessed using the <code class="language-plaintext highlighter-rouge">.</code> operator.</p>

<p>The cell’s elements can be accessed using <code class="language-plaintext highlighter-rouge">{}</code> and the index of the element.</p>

<h3 id="operations">Operations</h3>
<ul>
  <li>num2str()</li>
  <li>str2num()</li>
  <li>unwrap(): remove the changes of more than $2\pi$ from the phase that can be got with the angle function.</li>
  <li>All the angles are expressed in radians in these functions.</li>
  <li>When using mathematical functions on matrixex, the function is applied on each element of the matrixes.</li>
  <li>mult(): matrix multiplication.</li>
  <li>find(): find a value in arrays or matrixes.</li>
  <li>findpeaks(): find array peaks.</li>
  <li>logical operators (pay attention to function <code class="language-plaintext highlighter-rouge">almostequal()</code>)</li>
</ul>

<p><img src="/assets/images/20221005-FDTD-lsf-2.png" alt="2" /></p>

<h2 id="simulation-objects">Simulation objects</h2>
<h3 id="simulation-modes">Simulation modes</h3>
<p>To add a simulation object and set its properties, you first have to be in layoutmode.</p>

<p>You can do the same by using <code class="language-plaintext highlighter-rouge">layoutmode</code>. It returns ‘1’ if you are in layoutmode and ‘0’ when in analysis mode.</p>

<p>To set the simulation into layoutmode, you can use <code class="language-plaintext highlighter-rouge">switchtolayout</code> command.</p>

<h3 id="location-group-scope-in-the-objects-tree">Location (group scope) in the objects tree</h3>
<p>Default group scope is <code class="language-plaintext highlighter-rouge">model</code>, which is the root of the object tree.</p>

<p>When you add an object using script, it is placed under the current group scope.</p>

<p>Use command <code class="language-plaintext highlighter-rouge">groupscope("::model::NAME")</code> to go into one group named “NAME” or <code class="language-plaintext highlighter-rouge">groupscope("NAME")</code> if in <code class="language-plaintext highlighter-rouge">model</code> scope now.</p>

<h3 id="add-objects">Add objects</h3>
<p>Command: <code class="language-plaintext highlighter-rouge">addOBJECT_TYPE_NAME</code> if the name of the object’s type is “OBJECT_TYPE_NAME”. For instance, <code class="language-plaintext highlighter-rouge">addrect</code></p>

<h3 id="getset-properties-of-objects">Get/Set properties of objects</h3>
<p>To set the properties of an object, you first have to select it and then set the properties. But when you add an object, it is automatically selected as shown here with addcircle. So there is no need to select the object if you are to set its properties right after adding it.</p>

<p>How to select objects?</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">select("NAME")</code>: select the object named “NAME”.</li>
  <li><code class="language-plaintext highlighter-rouge">shiftselect("NAME")</code>: select new object named “NAME” while keeping the current selected objects.</li>
  <li><code class="language-plaintext highlighter-rouge">selectall()</code>: select all the objects.</li>
  <li><code class="language-plaintext highlighter-rouge">selectpartial("PNAME")</code>: select objects with the partial name “PNAME”.</li>
</ul>

<p>How to set property?</p>
<ul>
  <li>Use command <code class="language-plaintext highlighter-rouge">set("PROPERTY_NAME", VALUE)</code> to set the property named “PROPERTY_NAME” of selected objects with value represented by <code class="language-plaintext highlighter-rouge">VALUE</code>.</li>
  <li>Use command <code class="language-plaintext highlighter-rouge">setnamed("OBJECT_NAME", "PROPERTY_NAME", VALUE)</code> to set the property named “PROPERTY_NAME” of the object named “OBJECT_NAME” with value represented by <code class="language-plaintext highlighter-rouge">VALUE</code>.</li>
</ul>

<p>How to get property?</p>
<ul>
  <li>Use command <code class="language-plaintext highlighter-rouge">get("PROPERTY_NAME", VALUE)</code> to get the property named “PROPERTY_NAME” of selected objects.</li>
  <li>Use command <code class="language-plaintext highlighter-rouge">getnamed("OBJECT_NAME", "PROPERTY_NAME")</code> to get the property named “PROPERTY_NAME” of the object named “OBJECT_NAME”.</li>
</ul>

<h2 id="running-simulations">Running simulations</h2>
<h3 id="running-a-single-simulation">Running a single simulation</h3>
<p>To start a simulation, simply use the command <code class="language-plaintext highlighter-rouge">run</code>. It will launch the current project using the resources set in the resource manager.</p>

<p>Once the simulation is finished, the project is in analysis mode. Modification of any simulation settings is not allowed in this mode.So, if you want to change some of the settings for another simulation, you first need to get back to layout mode, using the command <code class="language-plaintext highlighter-rouge">switchtolayout</code>. Note you can use the command <code class="language-plaintext highlighter-rouge">layoutmode</code> to check if the project is in layout or analysis mode. It returns ‘1’ if you are in layoutmode and ‘0’ when in analysis mode.</p>

<h3 id="running-multiple-simulations-using-the-job-manager">Running multiple simulations using the job manager</h3>
<p><code class="language-plaintext highlighter-rouge">The job manager</code> allows you to run concurrent calculations using the resources set in the resource manager.</p>

<p>Commands:</p>
<ul>
  <li>Use command <code class="language-plaintext highlighter-rouge">addjob("FILENAME")</code> to add the specified project named “FILENAME” to the queue of simulations to be run.</li>
  <li>Use command <code class="language-plaintext highlighter-rouge">clearjobs</code> to remove all jobs from the queue.</li>
  <li>Use command <code class="language-plaintext highlighter-rouge">runjobs</code> to run all the jobs in the queue.</li>
</ul>

<p>Notes:</p>
<ul>
  <li>The job manager can be used to run a parameter sweep by creating all the simulation files and add them to the queue firstly and then running the jobs in the queue.</li>
  <li><em>(Advantage)</em> The job manager can run more than 1 simulation at a time.</li>
</ul>

<h3 id="running-parameter-sweep-and-optimization">Running parameter sweep and optimization</h3>
<p>When using parameter sweep, the selected task is run by first creating simulation files corresponding to the sweep parameter values and then adding them to the job manager.</p>

<p>Commands:</p>
<ul>
  <li>Use command <code class="language-plaintext highlighter-rouge">runsweep("TASKNAME")</code> to start the specified task named “TASKNAME” in the Optimizations and Sweeps window.</li>
  <li>Use command <code class="language-plaintext highlighter-rouge">runsweep</code> to start all the tasks.</li>
</ul>

<h2 id="accessing-and-visualizing-simulation-results">Accessing and visualizing simulation results</h2>
<h3 id="accessing-simulation-results">Accessing simulation results</h3>
<p>There are two types of data available in an object: <code class="language-plaintext highlighter-rouge">results</code> and <code class="language-plaintext highlighter-rouge">rawdata</code>. While <code class="language-plaintext highlighter-rouge">results</code> contains datasets formed by related data, <code class="language-plaintext highlighter-rouge">rawdata</code> contains individual data elements in matrix form. In comparison to <code class="language-plaintext highlighter-rouge">rawdata</code>, <code class="language-plaintext highlighter-rouge">results</code> have the advantage that they can be opened in the visualizer to generate plots with proper axes.</p>

<p>Basic commands:</p>
<ul>
  <li>Use command <code class="language-plaintext highlighter-rouge">getdata("OBJECT_NAME", "PROPERTY_NAME")</code> to get a <code class="language-plaintext highlighter-rouge">rawdata</code> named “PROPERTY_NAME” from the object named “OBJECT_NAME”.</li>
  <li>Use command <code class="language-plaintext highlighter-rouge">getresult("OBJECT_NAME", "PROPERTY_NAME")</code> to get a <code class="language-plaintext highlighter-rouge">results</code> named “PROPERTY_NAME” from the object named “OBJECT_NAME”.</li>
  <li>Omit the parameter “PROPERTY_NAME” to get all.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mname</span> <span class="o">=</span> <span class="s">'profile'</span><span class="p">;</span>

<span class="c1"># rawdata
</span><span class="n">x</span> <span class="o">=</span> <span class="n">getdata</span><span class="p">(</span><span class="n">mname</span><span class="p">,</span> <span class="s">'x'</span><span class="p">);</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">getdata</span><span class="p">(</span><span class="n">mname</span><span class="p">,</span> <span class="s">'y'</span><span class="p">);</span>
<span class="n">Ex</span> <span class="o">=</span> <span class="n">getdata</span><span class="p">(</span><span class="n">mname</span><span class="p">,</span> <span class="s">'Ex'</span><span class="p">);</span>
<span class="n">Ey</span> <span class="o">=</span> <span class="n">getdata</span><span class="p">(</span><span class="n">mname</span><span class="p">,</span> <span class="s">'Ey'</span><span class="p">);</span>
<span class="n">Ez</span> <span class="o">=</span> <span class="n">getdata</span><span class="p">(</span><span class="n">mname</span><span class="p">,</span> <span class="s">'Ez'</span><span class="p">);</span>

<span class="c1"># results (equal)
</span><span class="n">E</span> <span class="o">=</span> <span class="n">getresult</span><span class="p">(</span><span class="n">mname</span><span class="p">,</span> <span class="s">'E'</span><span class="p">);</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">E</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">E</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
<span class="n">Ex</span> <span class="o">=</span> <span class="n">E</span><span class="p">.</span><span class="n">Ex</span><span class="p">;</span>
<span class="n">Ey</span> <span class="o">=</span> <span class="n">E</span><span class="p">.</span><span class="n">Ey</span><span class="p">;</span>
<span class="n">Ez</span> <span class="o">=</span> <span class="n">E</span><span class="p">.</span><span class="n">Ez</span><span class="p">;</span>
</code></pre></div></div>

<p>Commands for retrieving specific data from monitor:</p>
<ul>
  <li>Use command <code class="language-plaintext highlighter-rouge">getelectric("MONITOR_NAME")</code> to get the intensity of electric field from the monitor named “MONITOR_NAME”.</li>
  <li>Use command <code class="language-plaintext highlighter-rouge">getmagnetic("MONITOR_NAME")</code> to get the intensity of magnetic field from the monitor named “MONITOR_NAME”.</li>
  <li>Use command <code class="language-plaintext highlighter-rouge">transmission("MONITOR_NAME")</code> to get the fraction of power transmitted through the monitor named “MONITOR_NAME” with respect to the source power.</li>
</ul>

<p>Commands for retrieving data from parameter sweep, optimization, yield analysis, and S-parameter sweep objects:</p>
<ul>
  <li>Use command <code class="language-plaintext highlighter-rouge">getsweepdata("SWEEP_NAME", "PROPERTY_NAME")</code> to get a <code class="language-plaintext highlighter-rouge">rawdata</code> named “PROPERTY_NAME” from the Optimization and Sweeps object named “SWEEP_NAME”.</li>
  <li>Use command <code class="language-plaintext highlighter-rouge">getsweepresult("SWEEP_NAME")</code> to get a <code class="language-plaintext highlighter-rouge">result</code> named “PROPERTY_NAME” from the Optimization and Sweeps object named “SWEEP_NAME”.</li>
  <li>Omit the parameter “PROPERTY_NAME” to get all.</li>
</ul>

<p>Notes:</p>
<ul>
  <li>The sign of the transmission depends on the direction of propagation. The transmission is positive when the power is flowing through the monitor in the positive direction, that is in the +x, +y, or +z direction. So for a planewave propagating in backward (negative) direction, a negative transmission will be returned.</li>
</ul>

<h3 id="visualising-simulation-results">Visualising simulation results</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">plot</code> creates a line plot. All data sets in its argument should be sampled on the same position vector.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="mi">1</span><span class="p">:</span><span class="mf">0.1</span><span class="p">:</span><span class="mi">10</span><span class="p">;</span>
<span class="n">y1</span> <span class="o">=</span> <span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
<span class="n">y2</span> <span class="o">=</span> <span class="n">cos</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>

<span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y1</span><span class="p">);</span>
<span class="c1"># &gt;
</span>
<span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">y2</span><span class="p">,</span> <span class="s">"x label"</span><span class="p">,</span> <span class="s">"y label"</span><span class="p">,</span> <span class="s">"title"</span><span class="p">);</span>
<span class="n">legend</span><span class="p">(</span><span class="s">"sin(x)"</span><span class="p">,</span> <span class="s">"cos(x)"</span><span class="p">);</span>
<span class="c1"># &gt;
</span>
<span class="c1"># Plotting options
</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="s">"x"</span><span class="p">,</span> <span class="s">"y"</span><span class="p">,</span> <span class="s">"title"</span><span class="p">,</span> <span class="s">"plot type = point, color = red, marker style = o"</span><span class="p">)</span>
<span class="c1"># &gt;
</span></code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">plotxy</code> allows us to use datasets that are sampled on different position vectors.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x1</span> <span class="o">=</span> <span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="o">*</span><span class="n">pi</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
<span class="n">y1</span> <span class="o">=</span> <span class="n">sin</span><span class="p">(</span><span class="n">x1</span><span class="p">);</span>
<span class="n">x2</span> <span class="o">=</span> <span class="n">linspace</span><span class="p">(</span><span class="n">pi</span><span class="p">,</span> <span class="mi">3</span> <span class="o">*</span> <span class="n">pi</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
<span class="n">y2</span> <span class="o">=</span> <span class="n">cos</span><span class="p">(</span><span class="n">x2</span><span class="p">);</span>

<span class="n">plotxy</span><span class="p">(</span><span class="n">x1</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">x2</span><span class="p">,</span> <span class="n">y2</span><span class="p">,</span> <span class="s">"x label"</span><span class="p">,</span> <span class="s">"y label"</span><span class="p">,</span> <span class="s">"title"</span><span class="p">);</span>
<span class="n">legend</span><span class="p">(</span><span class="s">"sin(x1)"</span><span class="p">,</span> <span class="s">"cos(x2)"</span><span class="p">)</span>
<span class="c1"># &gt;
</span></code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">polar</code> visualizes results in polar coordinates. All data sets must be sampled on the same array of angle values.</li>
  <li><code class="language-plaintext highlighter-rouge">polar2</code> adds multiple polar plots sampled on different angle values.</li>
  <li><code class="language-plaintext highlighter-rouge">image</code> creates 2D color plots.</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">100</span><span class="p">);</span>
<span class="n">X</span> <span class="o">=</span> <span class="n">meshgridx</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
<span class="n">Y</span> <span class="o">=</span> <span class="n">meshgridy</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
<span class="n">Z</span> <span class="o">=</span> <span class="n">sin</span><span class="p">(</span><span class="n">X</span><span class="p">)</span> <span class="o">^</span> <span class="mi">2</span> <span class="o">+</span> <span class="n">cos</span><span class="p">(</span><span class="n">Y</span><span class="p">)</span> <span class="o">^</span> <span class="mi">2</span><span class="p">;</span>
<span class="n">image</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">Z</span><span class="p">,</span> <span class="s">"x label"</span><span class="p">,</span> <span class="s">"y label"</span><span class="p">,</span> <span class="s">"title"</span><span class="p">);</span>
<span class="c1"># &gt;
</span></code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">polarimage</code> creates 2D polar image plots. The first two arguments should be a vector that can go from -1 to +1. When used with farfield projection commands, the first two arguments are associated with the direction cosine of the farfield - hence the limitations on the values they can accept.</li>
  <li>Use command <code class="language-plaintext highlighter-rouge">setplot</code> to get the properties can be set for current figure window.</li>
  <li>Use command <code class="language-plaintext highlighter-rouge">setplot("PROPERTY_NAME", VALUE)</code> to set the property named “PROPERTY_NAME” of the current figure window with value <code class="language-plaintext highlighter-rouge">VALUE</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">holdon</code> switches the plotting mode to hold multiple functions on the same figure.</li>
  <li><code class="language-plaintext highlighter-rouge">holdoff</code> switches off the holdon mode.</li>
  <li><code class="language-plaintext highlighter-rouge">selectfigure(NUMBER)</code> selects a figure with a specified figure number <code class="language-plaintext highlighter-rouge">NUMBER</code>. When used without any argument, it selects the last figure created.</li>
  <li><code class="language-plaintext highlighter-rouge">exportfigure("FILE_NAME", XRES, YRES)</code> exports the current figure to a JPG image with the name ‘filename’, the x resolution <code class="language-plaintext highlighter-rouge">XRES</code> and the y resolution <code class="language-plaintext highlighter-rouge">YRES</code>. If the x/y resolutions are not specified, the exported image will have the same size as the current figure.</li>
</ul>

<h2 id="file-io">File I/O</h2>
<h3 id="manipulating-project-files">Manipulating project files</h3>
<p>Commands:</p>
<ul>
  <li>Use command <code class="language-plaintext highlighter-rouge">newproject</code> without argument will create a new project based on the default template. You can also create a new simulation project based on another template with an argument, for instance to use materials from an existing simulation file.</li>
  <li>Use command <code class="language-plaintext highlighter-rouge">save("PATH_FILENAME")</code> to save the current simulation project in a file specified with “PATH_FILENAME”. You can specify a path, otherwise the file will be saved in the current directory. If you don’t specify the file name, a file browser window will open.</li>
  <li>Use command <code class="language-plaintext highlighter-rouge">load(PATH_FILENAME)</code> to load another project with “PATH_FILENAME”.</li>
</ul>

<h2 id="tips">Tips</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">""</code> is equal to <code class="language-plaintext highlighter-rouge">''</code>.</li>
</ul>

<h2 id="reference">Reference</h2>
<h3 id="core">Core</h3>
<p>[1] Lumerical scripting language - Alphabetical list: https://optics.ansys.com/hc/en-us/articles/360034923553</p>

<p>[2] Lumerical scripting language - By category: https://optics.ansys.com/hc/en-us/articles/360037228834-Lumerical-scripting-language-By-category</p>

<p>[3] Scripting100 videos: https://www.bilibili.com/video/BV1hr4y1w7Ze?p=1&amp;vd_source=c24841bbb7f5d10925aeadfcbf43b52f</p>

<p>[4] Scripting100 transcripts: https://optics.ansys.com/hc/en-us/sections/360007813714-SCRIPTING100-List-of-videos</p>

<p><em>Note:</em></p>
<ul>
  <li>You can learn Scripting100 Course using Ref.[3] with Ref.[4].</li>
</ul>]]></content><author><name>hzzg0727</name></author><category term="optics" /><category term="FDTD" /><category term="lsf" /><category term="meta" /><summary type="html"><![CDATA[Useful commands in ScriptPrompt ```python clear; # clear all the variables in the workspace a = 1; clear a; # clear variable a]]></summary></entry><entry><title type="html">FDTD Note: Basic</title><link href="https://hzzg0727.github.io/optics/2022/10/04/FDTD-basic.html" rel="alternate" type="text/html" title="FDTD Note: Basic" /><published>2022-10-04T00:00:00+08:00</published><updated>2022-10-04T00:00:00+08:00</updated><id>https://hzzg0727.github.io/optics/2022/10/04/FDTD-basic</id><content type="html" xml:base="https://hzzg0727.github.io/optics/2022/10/04/FDTD-basic.html"><![CDATA[<!-- # FDTD Note: Basic -->
<h2 id="1-far-field-projections">1. Far-field projections</h2>
<p>If your structure is periodic, consider using <code class="language-plaintext highlighter-rouge">the grating projections</code>. If your structure is not periodic, consider using <code class="language-plaintext highlighter-rouge">the far-field projections</code>.</p>

<p>A simple way to understand far field projections is to view them as a decomposition of the near field data using a set of plane waves propagating at different angles as the basis for the decomposition. The end result is that the far field projections functions provide a straightforward, accurate, and numerically efficient method for calculating the EM fields anywhere in the intermediate and far field regions.</p>

<p><em>It seems that grating projections are the special case (for periodic structures) of far-field projections.</em></p>

<p><strong>Application cases:</strong> fileds known on a plane or a closed surface.</p>

<h2 id="12-the-mesh-order-property">1.2. The mesh order property</h2>
<p><code class="language-plaintext highlighter-rouge">The mesh order property</code> governs how overlapping objects are meshed in the simulation. It serves no role for objects which do not overlap.</p>

<p>The mesh order can be set at the material level (in the material database), or the object level (in the object properties).</p>

<p>Materials with a lower mesh order take priority over materials with a higher priority number. Areas that overlap are assigned the material properties of the higher priority material.</p>

<h2 id="3-pml-边界条件">3. PML 边界条件</h2>
<p>PML 边界基本上被实现为吸收材料，该吸收材料也与周围的材料阻抗匹配，以最大程度地减少反射。 理想的PML边界会产生零反射，但是实际上，由于底层PML方程的离散化，总会有小反射。</p>

<h3 id="31-types">3.1 Types</h3>
<p><strong>Standard</strong></p>

<p>设计标准轮廓以相对较少的层数提供良好的整体吸收。大量的PML层会大大增加仿真时间，因此建议在考虑任何其他选择之前尝试使用此配置文件。<br />
如果模拟不包含贯穿PML区域的材料边界，则几乎可以肯定，此轮廓将是最明智的选择。<br />
通常，当结构完全延伸通过PML区域时，PML边界性能最佳。每当材料界面穿过PML区域时，可能有必要采用稳定的轮廓。</p>

<p><strong>Stabilized</strong></p>

<p>当材料边界穿过PML区域时，有可能出现数值不稳定性。这些通常表现为PML区域（通常靠近材料界面）内场振幅的局部指数增长。<br />
使用此配置文件可以消除PML区域内可能发生的大多数数值不稳定性，但是，此配置文件需要比标准配置文件更多的PML层数才能实现相同的吸收性能。<br />
稳定的轮廓旨在提供增强的稳定性，但必须增加PML层的数量。</p>

<p><strong>Steep Angle</strong></p>

<p>此配置文件与标准配置文件非常相似，并且意在将PML边界与周期性边界条件结合使用时使用。 它设计用于在光线沿几乎平行于PML边界的方向传播的情况下提供增强的吸收。 在非常粗糙的离散化下（每个波长少于十个点），该轮廓通常比标准轮廓的吸收率低。</p>

<p><strong>Custom</strong></p>

<p>标准的，稳定的和陡峭的侧面轮廓具有固定的PML参数。 自定义配置文件允许用户通过对所有PML参数值的完全控制来进行试验。 自定义配置文件的初始值是标准配置文件的初始值。</p>

<h3 id="32-如何使用">3.2 如何使用</h3>
<ol>
  <li>boundary conditions 中的 <code class="language-plaintext highlighter-rouge">standard</code> 类型适用于在所有边界上使用PML的模拟。</li>
  <li>如果是周期性的装置，可以将光的衍射，所以选择 <code class="language-plaintext highlighter-rouge">steep angle</code> 类型。</li>
  <li>PML 边界与光与物质相互作用的平面的距离至少为均匀材料中光波波长的一半。</li>
</ol>

<h2 id="4-simulation-region">4. Simulation Region</h2>
<ol>
  <li>Dimension 2D vs 3D:<br />
当仿真区域的某一维度（默认 z 轴）为无限长且均匀，将该维度的截面作为仿真的 2D 区域。设置几何参数时，需要确保该维度上的位置与模拟结构相交。</li>
  <li>Mesh Refinement：
    <ul>
      <li>一般使用 Conformal Variant0 对非金属材质界面应用保形网格。</li>
      <li>当有金属时可使用 Conformal Variant1 对金属界面应用保形网格。缺点：网格粗糙导致人工金属模态，因此需要加入额外的收敛性测试。</li>
      <li>其他选项的鲁棒性不好。</li>
    </ul>
  </li>
  <li>Simulation time:<br />
较大仿真体积和强共振系统需要较长的仿真时间，以令场通过仿真区域传播且完全衰减。<br />
仿真时间设置过小的可能结果：
    <ul>
      <li>频域监视器的伪影</li>
      <li>投射谱的 artificial ripples</li>
    </ul>
  </li>
  <li>The monitors besides the simulation region will not measure any data.</li>
  <li>When the simulation is unstable, smaller time step may be helpful.</li>
  <li>Mesh override region:
    <ul>
      <li>It can be used to define finer mesh on :
        <ul>
          <li>Small structures, e.g. thin layers and gaps</li>
          <li>Plasmonic devices</li>
          <li>The interface between the metal and dieletric materials to have the filed concentrated at the surface</li>
        </ul>
      </li>
      <li>The thickness of a layer is recommended to includes at least 2 mesh cells.</li>
      <li>The mesh override region contains only an interger number of mesh cells.</li>
    </ul>
  </li>
  <li>Boundary condition:
    <ul>
      <li>PML: absorb all; more details see <code class="language-plaintext highlighter-rouge">3. PML 边界条件</code></li>
      <li>metal: perfect metal boundary that reflects all; the most fast option using when the filed will not incounter the boundary</li>
      <li>PMC: perfect magnetic boundary that relects all</li>
      <li>Periodic: used when structure, source, and field are all periodic</li>
      <li>Symmetry or anti-symmetry: used when structure, source, and field are all symmetric</li>
      <li><em>Tip:</em> 斜入射平面波必须用 Bloch 边界，斜入射 Guass 光束必须用 PML 边界条件。</li>
      <li><em>Tip:</em> How to judge symmetry or anti-symmetry?  – Test all the possibilities and choose the true one.<br />
 经验法则（对照 CAD 彩色视图验证）：<br />
 <img src="/assets/images/2022-10-04-FDTD-basic-1.png" alt="" />
 设置方法：
        <ol>
          <li>2D symmetric structure: Set Symmetry of Anti-symmetry options in <code class="language-plaintext highlighter-rouge">x min bc</code> and <code class="language-plaintext highlighter-rouge">y min bc</code>, and set non-symmetry BC (generally PML) in <code class="language-plaintext highlighter-rouge">x max bc</code> and <code class="language-plaintext highlighter-rouge">y max bc</code>.</li>
          <li>1D symmetric structure (for example, x): Set Symmetry of Anti-symmetry options in both <code class="language-plaintext highlighter-rouge">x min bc</code> and <code class="language-plaintext highlighter-rouge">x max bc</code>.</li>
          <li>Enable <code class="language-plaintext highlighter-rouge">allow all symmetry on all boundaries</code>.</li>
        </ol>
      </li>
    </ul>
  </li>
  <li>Mesh accuracy is considered high-accurate at the value 4 or 5.</li>
  <li>If the boundary of PML is placed too close to the structure, there is couping of evanescent fields and PML materials. And sometimes there is reflection fromt the PML.</li>
</ol>

<h2 id="source">Source</h2>
<ol>
  <li>The fileds measured in the two cells around the source injeciton plane may be unphysical.</li>
  <li>Plane source:
    <ul>
      <li>Bloch/periodic source type is recommended to be used in single frequency simulation. The light at different frequencies will propogate in different angles if the incident angle is normal.</li>
      <li>BFAST source type is recommended to be used in broadband simulation. And for single frequency simulation, more time will be used than Bloch source type.</li>
      <li>Diffracting source type: The source span determines the aperture.</li>
      <li><em>Tip</em>: The Bloch/periodic or BFAST source will automatically expand to the boundary of simulation region.</li>
      <li><em>Error:</em> When the non-periodic boundary conditions is used, the Bloch/periodic source at the sides of simulation region will be truncated and the edge effects will appear. In this case, finite-size source (e.g., Guassian source or total-field scattered field source) should be used.</li>
      <li><em>Error:</em> The BFAST source type is not allowed in non-periodic structure simulation, so the BFAST boundaries will automatically be used and overrite other settings.<br />
经验选择：
<img src="/assets/images/2022-10-04-FDTD-basic-2.png" alt="" /></li>
    </ul>
  </li>
  <li>TFSF (total-field scattered field) source</li>
  <li>Beam source</li>
  <li>Mode source</li>
  <li>Dipole source</li>
</ol>

<h2 id="monitor">Monitor</h2>
<ol>
  <li>Using monitors will not increase the simulation time (but increase the memory requirement) except when using a movie monitor.</li>
  <li>Time monitor can be used to check if the simulation time is long enough.</li>
  <li>Use point time monitor can obtain spectrum.</li>
</ol>

<h2 id="analysis">Analysis</h2>
<ol>
  <li>Design workflow:
    <ul>
      <li>Start with a coarse mesh</li>
      <li>Convergence testing</li>
      <li>变精度搜索</li>
    </ul>
  </li>
  <li>Sources of errors (and corresponding solutions):
    <ul>
      <li>Three factors:
<img src="/assets/images/2022-10-04-FDTD-basic-3.png" alt="" /></li>
      <li><code class="language-plaintext highlighter-rouge">Simulation time</code> and <code class="language-plaintext highlighter-rouge">early shutoff</code> - <code class="language-plaintext highlighter-rouge">auto shutoff min</code> (in <code class="language-plaintext highlighter-rouge">Edit FDTD simulation</code>)</li>
    </ul>
  </li>
  <li>How to judge whether the simulation stop early?
<em>(One method)</em> Status result of the FDTD solver region:
    <ul>
      <li>1 - Reached the maximum simulation time</li>
      <li>2 - Early shut off, reached auto shutoff min threshold</li>
    </ul>
  </li>
</ol>

<h2 id="tips">Tips</h2>
<ol>
  <li>要通过收敛性测试实现高精度计算。</li>
  <li>When running, <code class="language-plaintext highlighter-rouge">Force quit</code> is not recommended since it may cause the problem that the license is not released normally.</li>
</ol>

<h2 id="reference-resources">Reference (Resources)</h2>
<p><strong>Core</strong></p>

<p>[1] FDTD product reference manual: https://optics.ansys.com/hc/en-us/articles/360033154434-FDTD-product-reference-manual</p>

<p>[2] Python API: https://optics.ansys.com/hc/en-us/sections/360005039073-Automation-API</p>

<p>[3] lsf Language: https://optics.ansys.com/hc/en-us/articles/360034923553</p>

<p>[4] lsf Language Category: https://optics.ansys.com/hc/en-us/articles/360037228834-Lumerical-scripting-language-By-category</p>

<p>[5] ANSYS Forum: https://forum.ansys.com/</p>

<p><strong>Others</strong></p>

<p>[1] PML 边界条件设置: https://www.cnblogs.com/lihao-bupt/p/13177884.html</p>

<p>[2] FDTD100 Course Notes: https://blog.csdn.net/weixin_45719141/article/details/125373485</p>]]></content><author><name>hzzg0727</name></author><category term="optics" /><category term="FDTD" /><category term="meta" /><summary type="html"><![CDATA[1. Far-field projections If your structure is periodic, consider using the grating projections. If your structure is not periodic, consider using the far-field projections.]]></summary></entry><entry><title type="html">基于 Github Pages &amp;amp; Jekyll 的个人博客搭建方法</title><link href="https://hzzg0727.github.io/code/2022/08/29/blog-build.html" rel="alternate" type="text/html" title="基于 Github Pages &amp;amp; Jekyll 的个人博客搭建方法" /><published>2022-08-29T11:33:00+08:00</published><updated>2022-08-29T11:33:00+08:00</updated><id>https://hzzg0727.github.io/code/2022/08/29/blog-build</id><content type="html" xml:base="https://hzzg0727.github.io/code/2022/08/29/blog-build.html"><![CDATA[<!-- # 基于 Github Pages & Jekyll 的个人博客搭建方法 -->
<h2 id="1-软件安装">1. 软件安装</h2>
<p><strong>清单</strong></p>
<ul>
  <li>Git</li>
  <li>Github Desktop (optional)</li>
  <li>Ruby + Devkit
其中，Ruby 安装有如下注意事项：</li>
  <li>安装包下载地址：https://rubyinstaller.org/downloads/</li>
  <li>以管理员身份运行安装文件</li>
  <li>安装目录不要包含中文和空格（空格是一个<strong>坑</strong>，会导致下方的部分命令出现运行时错误）</li>
  <li>其他选项可默认执行</li>
  <li>MSYS 安装会耗时久一些，耐心
Github Desktop 可以帮助不熟悉 Git 操作的朋友进行 Github 仓库的版本管理。</li>
</ul>

<h2 id="2-github-pages">2. Github Pages</h2>
<p>Github 上建立以用户 <code class="language-plaintext highlighter-rouge">id</code> 为第一级名称的 public 仓库：<code class="language-plaintext highlighter-rouge">id</code>.github.io, 如此获得域名为 https://<code class="language-plaintext highlighter-rouge">id</code>/github.io 的站点作为博客网站。</p>

<h2 id="3-ruby-相关包安装">3. Ruby 相关包安装</h2>
<p>在终端运行依次如下指令，安装如下包：</p>
<ul>
  <li>bundler</li>
  <li>jekyll</li>
  <li>webrick（也是一个<strong>坑</strong>：Ruby3.0.0 以上不会再自带 WebRick，需要自行添加）
    <div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="n">install</span> <span class="n">jekyll</span> <span class="n">bundler</span>
<span class="n">gem</span> <span class="n">install</span> <span class="n">webrick</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="4-建立博客文件和部署到-github-pages">4. 建立博客文件和部署到 Github pages</h2>
<ol>
  <li>进入自己选定的本地博客目录</li>
  <li>安装项目依赖的所有 gem 包。运行<br />
   <code class="language-plaintext highlighter-rouge">bundle install</code></li>
  <li>创建博客文件夹。设 [blog name] 为博客名称。运行<br />
<code class="language-plaintext highlighter-rouge">jekyll new [blog name]</code></li>
  <li>本地预览。进入博客文件夹内后，运行<br />
<code class="language-plaintext highlighter-rouge">bundle exec jekyll server</code><br />
或者（区别在 bundle 的作用）<br />
<code class="language-plaintext highlighter-rouge">jekyll server</code><br />
浏览器进入网址 http://localhost:4000 查看效果。<code class="language-plaintext highlighter-rouge">Ctrl + c</code> 结束本地预览。</li>
  <li>运行如下命令生成网页文件<br />
<code class="language-plaintext highlighter-rouge">jekyll build</code><br />
将 _site 文件夹<strong>内</strong>的所有文件复制到本地 Github Pages 仓库根目录下。</li>
  <li>同步到 Github.</li>
</ol>

<h2 id="5-应用和修改-theme">5. 应用和修改 theme</h2>
<p>在 Github 中搜索 <code class="language-plaintext highlighter-rouge">jekyll theme</code>，寻找感兴趣的主题，并按照其文档部署到自己的项目，以及自定义的修改。</p>

<p>对相关知识不熟悉的朋友，建议选择 star 较多的项目，可能会 bug 更少，效果更好。</p>

<h2 id="6-其他">6. 其他</h2>
<p><code class="language-plaintext highlighter-rouge">jemoji</code> 包可以为 jekyll 提供 emoji 支持。</p>

<h2 id="reference">Reference</h2>
<p><em>本文介绍择其大纲，细节较为简略。可结合以下文章食用。由于更新时间问题，下述文章的部分内容如今是可能产生问题的，参考时注意规避本文提到的两个坑。</em></p>

<p>[1] Github Pages + jekyll 全面介绍极简搭建个人网站和博客  https://zhuanlan.zhihu.com/p/51240503</p>

<p>[2] Jekyll + Github Pages 搭建个人免费博客  https://zhuanlan.zhihu.com/p/87225594</p>

<p>[3] Bundle、Gem、Gemfile关系  https://www.jianshu.com/p/32fcdeb5bbec</p>

<p>[4] Jekyll使用教程笔记  https://juejin.cn/post/6844903623567081486</p>]]></content><author><name>hzzg0727</name></author><category term="code" /><category term="Github" /><category term="Jekyll" /><summary type="html"><![CDATA[1. 软件安装 清单 Git Github Desktop (optional) Ruby + Devkit 其中，Ruby 安装有如下注意事项： 安装包下载地址：https://rubyinstaller.org/downloads/ 以管理员身份运行安装文件 安装目录不要包含中文和空格（空格是一个坑，会导致下方的部分命令出现运行时错误） 其他选项可默认执行 MSYS 安装会耗时久一些，耐心 Github Desktop 可以帮助不熟悉 Git 操作的朋友进行 Github 仓库的版本管理。]]></summary></entry><entry><title type="html">Life test</title><link href="https://hzzg0727.github.io/life/2022/08/29/life-test.html" rel="alternate" type="text/html" title="Life test" /><published>2022-08-29T00:00:00+08:00</published><updated>2022-08-29T00:00:00+08:00</updated><id>https://hzzg0727.github.io/life/2022/08/29/life-test</id><content type="html" xml:base="https://hzzg0727.github.io/life/2022/08/29/life-test.html"><![CDATA[<!-- # life test. -->]]></content><author><name>hzzg0727</name></author><category term="life" /><category term="TEST" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">WPS 公式快捷输入的配置方法</title><link href="https://hzzg0727.github.io/others/2022/08/28/wps-equation-configure.html" rel="alternate" type="text/html" title="WPS 公式快捷输入的配置方法" /><published>2022-08-28T19:16:03+08:00</published><updated>2022-08-28T19:16:03+08:00</updated><id>https://hzzg0727.github.io/others/2022/08/28/wps-equation-configure</id><content type="html" xml:base="https://hzzg0727.github.io/others/2022/08/28/wps-equation-configure.html"><![CDATA[<!-- # WPS 公式快捷输入的配置方法 -->
<h2 id="1-设置插入公式快捷键">1. 设置插入公式快捷键</h2>
<p>不同于 WORD 自带了插入公式快捷键，WPS 中需要我们手动添加。以此选择：文件、自定义功能区、键盘快捷方式（自定义），调出自定义键盘窗口。</p>

<p>在 <code class="language-plaintext highlighter-rouge">类别</code> 中选择 <code class="language-plaintext highlighter-rouge">“插入”选项卡</code>，在 <code class="language-plaintext highlighter-rouge">命令</code> 中选择 <code class="language-plaintext highlighter-rouge">EquationInsert</code>，在 <code class="language-plaintext highlighter-rouge">当前快捷键窗口</code> 可以查看当前已定义的快捷键（默认为空），在 <code class="language-plaintext highlighter-rouge">请按新的快捷键</code> 区域录入新的快捷键。如：Alt + =。</p>

<p><img src="/assets/images/wec0.png" alt="0" /></p>

<h2 id="2-掌握-wps-公式编辑器的快捷键">2. 掌握 WPS 公式编辑器的快捷键</h2>
<p>WPS 公式编辑器无法支持 Latex 语法，鼠标操作速度很慢。因此，掌握常用的快捷键可以大大提高公式插入编辑的速度，甚至在无需鼠标操作的情况下完成几乎所有公式的编辑。</p>

<p><strong>常用 WPS 公式编辑器快捷键</strong></p>
<ul>
  <li>调出选项卡
    <ul>
      <li>Alt + F: 文件选项卡</li>
      <li>Alt + E: 编辑选项卡</li>
      <li>Alt + V: 视图选项卡</li>
      <li>Alt + T: 格式选项卡</li>
      <li>Alt + S: 样式选项卡</li>
      <li>Alt + Z: 尺寸选项卡</li>
      <li>Alt + H: 帮助选项卡</li>
    </ul>
  </li>
  <li>退出公式编辑
    <ul>
      <li>Alt + F -&gt; X: 即文件选项卡中 <code class="language-plaintext highlighter-rouge">退出</code> 选项</li>
      <li>其他选项同理</li>
    </ul>
  </li>
  <li>希腊字母
    <ul>
      <li>Ctrl + G -&gt; 英文字母: 输入英文字母对应的小写希腊字母</li>
      <li>Ctrl + G -&gt; Shift -&gt; 英文字母: 输入英文字母对应的大写希腊字母</li>
    </ul>
  </li>
  <li>括号<br />
<em>由于括号中元素尺寸不确定，最好采用如下方式输入的尺寸自适应的括号</em>
    <ul>
      <li>Ctrl + 9 / 0: 小括号</li>
      <li>Ctrl + [ / ]: 中括号</li>
      <li>Ctrl + Shift + [ / ]: 大括号</li>
    </ul>
  </li>
  <li>数学公式
    <ul>
      <li>Ctrl + F: 上下分式</li>
      <li>Ctrl + /: 单行倾斜分式</li>
      <li>Ctrl + R: 根式（省略2）</li>
      <li>Ctrl + T -&gt; N : 任意阶根式</li>
      <li>Ctrl + H: 上标</li>
      <li>Ctrl + L: 下标</li>
      <li>Ctrl + J: 上下标</li>
      <li>Ctrl + K -&gt; &lt;: 小于等于</li>
      <li>Ctrl + K -&gt; &gt;: 大于等于</li>
      <li>Ctrl + Alt + ‘: 一阶导数</li>
      <li>Ctrl + Shift + ‘: 二阶导数</li>
      <li>Ctrl + I: 定积分</li>
      <li>Ctrl + Shift + -: 输入字母后，凭此在字母上添加上横线</li>
      <li>Ctrl + Alt + -: 输入字母后，凭此在字母上添加矢量箭头</li>
    </ul>
  </li>
  <li>其他
    <ul>
      <li>Tab: 元素间跳转（完成某类元素输入后转入后续元素，如由上标输入完成后回归正常尺寸）</li>
    </ul>
  </li>
</ul>

<h2 id="reference">Reference</h2>
<p>[1] https://wenku.baidu.com/view/283e6549bcd5b9f3f90f76c66137ee06eff94e3c.html</p>]]></content><author><name>hzzg0727</name></author><category term="others" /><category term="WPS" /><category term="排版" /><summary type="html"><![CDATA[1. 设置插入公式快捷键 不同于 WORD 自带了插入公式快捷键，WPS 中需要我们手动添加。以此选择：文件、自定义功能区、键盘快捷方式（自定义），调出自定义键盘窗口。]]></summary></entry></feed>